package coffee_machine.reports;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Objects;

import coffee_machine.Flow;
import coffee_machine.list_drinks.DrinkListFlow;
import coffee_machine.model.CoffeeMachineState;
import coffee_machine.model.Drink;
import coffee_machine.model.DrinksContainer;
import coffee_machine.reports.transformers.OrderedDrinksContainerToDTO;
import coffee_machine.reports.transformers.dto.DrinksReportDTO;
import coffee_machine.xml_io.XMLDocumentMetaData;
import coffee_machine.xml_io.XMLIO;
import coffee_machine.xml_io.exceptions.XMLIOException;

/**
 * Used to generate report for ordered drinks. The report is an XML file and
 * consists of the sold amount of every drink type and their total number.
 * 
 * @author Hristo
 * 
 */
public class DrinksReportFlow implements Flow {

	/**
	 * Calculates the number of ordered drinks based on the current amount of
	 * drinks in the machine and their number when the machine started
	 * operating. The data is then transformed into a suitable for XML format
	 * and is then saved into an XML file.
	 * 
	 * @param CoffeeMachineState
	 *            - the current state of the coffee machine.
	 * @return Flow object
	 */
	@Override
	public Flow execute(CoffeeMachineState machine) {

		try {
			DrinksContainer orderedDrinks = calculateOrderedDrinks(
					machine.getCurrentDrinks(), machine.getInitialDrinks());
			OrderedDrinksContainerToDTO transformer = new OrderedDrinksContainerToDTO();

			DrinksReportDTO drinksReport = transformer.transform(orderedDrinks);
			save(drinksReport);

		} catch (NullPointerException e) {
			System.out.println("Error saving the report to a file!"
					+ System.lineSeparator() + e.getMessage());
		}
		return new DrinkListFlow();
	}

	/**
	 * Calculates the number of ordered drinks by taking the current drinks
	 * amount in the machine and the amount when it was initialized.
	 * 
	 * @param currentDrinks
	 *            - current drinks amount in the machine
	 * @param initialDrinks
	 *            - the amount of drinks when the machine started operating
	 * @return DrinksContainer object, showing the number of ordered drinks.
	 */
	public DrinksContainer calculateOrderedDrinks(
			DrinksContainer currentDrinks, DrinksContainer initialDrinks) {

		Objects.requireNonNull(currentDrinks, "Current drinks object is null!");
		Objects.requireNonNull(initialDrinks, "Initial drinks amount is null!");

		DrinksContainer orderedDrinks = new DrinksContainer();

		for (Drink drink : initialDrinks.getDrinks().keySet()) {
			int difference = initialDrinks.getDrinkQuantity(drink)
					- currentDrinks.getDrinkQuantity(drink);
			orderedDrinks.add(new Drink(drink.getName(), drink.getPrice()),
					difference);
		}
		orderedDrinks.commit();

		return orderedDrinks;
	}

	/**
	 * Saves the specified DrinksReportDTO object to a XML file. The file has a
	 * name generated by the current time and date.
	 * 
	 * @param drinksReport
	 *            - the object to be saved.
	 */
	void save(DrinksReportDTO drinksReport) {
		Objects.requireNonNull(drinksReport,
				"Drinks report transfer object is null and cannot be written to file!");
		XMLIO xml = new XMLIO();
		String filename = generateReportName();
		XMLDocumentMetaData xmlMeta = new XMLDocumentMetaData(
				drinksReport.getClass(), filename, "src/DrinksReport.xsd");

		try {
			System.out.println("Report: " + filename + drinksReport.toString()
					+ System.lineSeparator());
			xml.write(xmlMeta, drinksReport);
		} catch (XMLIOException e) {
			System.out.println("Cannot write report to file!");
		}
	}

	private String generateReportName() {

		DateFormat dateFormat = new SimpleDateFormat("HH;mm;ss - dd-MM-yyyy");
		Calendar cal = Calendar.getInstance();

		String fileName = "reports/" + dateFormat.format(cal.getTime())
				+ ".xml";

		return fileName;
	}

}
